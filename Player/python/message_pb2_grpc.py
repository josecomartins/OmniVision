# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import message_pb2 as message__pb2


class Yolo_OmniStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send_Omni = channel.unary_stream(
                '/pb.Yolo_Omni/Send_Omni',
                request_serializer=message__pb2.Request_Omni_Calib.SerializeToString,
                response_deserializer=message__pb2.Response_Omni.FromString,
                )


class Yolo_OmniServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Send_Omni(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Yolo_OmniServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send_Omni': grpc.unary_stream_rpc_method_handler(
                    servicer.Send_Omni,
                    request_deserializer=message__pb2.Request_Omni_Calib.FromString,
                    response_serializer=message__pb2.Response_Omni.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Yolo_Omni', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Yolo_Omni(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Send_Omni(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pb.Yolo_Omni/Send_Omni',
            message__pb2.Request_Omni_Calib.SerializeToString,
            message__pb2.Response_Omni.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Yolo_KinectStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send_Kinect = channel.unary_unary(
                '/pb.Yolo_Kinect/Send_Kinect',
                request_serializer=message__pb2.Request.SerializeToString,
                response_deserializer=message__pb2.Response_Kinect.FromString,
                )


class Yolo_KinectServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Send_Kinect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Yolo_KinectServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send_Kinect': grpc.unary_unary_rpc_method_handler(
                    servicer.Send_Kinect,
                    request_deserializer=message__pb2.Request.FromString,
                    response_serializer=message__pb2.Response_Kinect.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Yolo_Kinect', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Yolo_Kinect(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Send_Kinect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Yolo_Kinect/Send_Kinect',
            message__pb2.Request.SerializeToString,
            message__pb2.Response_Kinect.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Base_SatationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send_to_BS = channel.unary_unary(
                '/pb.Base_Satation/Send_to_BS',
                request_serializer=message__pb2.Request_BS.SerializeToString,
                response_deserializer=message__pb2.Response_to_BS.FromString,
                )


class Base_SatationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Send_to_BS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Base_SatationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send_to_BS': grpc.unary_unary_rpc_method_handler(
                    servicer.Send_to_BS,
                    request_deserializer=message__pb2.Request_BS.FromString,
                    response_serializer=message__pb2.Response_to_BS.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Base_Satation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Base_Satation(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Send_to_BS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Base_Satation/Send_to_BS',
            message__pb2.Request_BS.SerializeToString,
            message__pb2.Response_to_BS.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
